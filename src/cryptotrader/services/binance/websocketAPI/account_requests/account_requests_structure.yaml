binance_websocket_account_api:
  description: "API functions for account-related operations in the CryptoTrader Binance WebSocket API implementation"
  
  dependencies:
    - cryptotrader.config.Secrets
    - cryptotrader.config.get_logger
    - cryptotrader.services.binance.websocketAPI.base_operations.BinanceWebSocketConnection
    - cryptotrader.services.binance.websocketAPI.base_operations.SecurityType
    - cryptotrader.services.binance.models.AccountBalance
    - cryptotrader.services.binance.models.order_models.OrderStatusResponse
    - cryptotrader.services.binance.models.order_models.OcoOrderResponse
    - cryptotrader.services.binance.models.order_models.OrderTrade
    - cryptotrader.services.binance.models.order_models.PreventedMatch
    - cryptotrader.services.binance.models.order_models.RateLimitInfo
  
  account_requests:
    description: "WebSocket requests for account data from the Binance API"
    modules:
      get_user_acct_info:
        description: "Retrieve user account information"
        requests:
          get_account_info:
            description: "Get current account information including balances"
            endpoint: "account.status"
            weight: 10
            security_type: "USER_DATA"
            parameters:
              - recv_window: "Maximum time in milliseconds the request is valid for (optional, max 60000)"
            returns: "Account information with balances, permissions, and commission rates"
            data_source: "Memory => Database"
      
      get_order_rate_limits:
        description: "Retrieve order rate limits"
        requests:
          get_order_rate_limits:
            description: "Get current order rate limits for all time intervals"
            endpoint: "account.rateLimits.orders"
            weight: 20
            security_type: "USER_DATA"
            parameters:
              - recv_window: "Maximum time in milliseconds the request is valid for (optional, max 60000)"
            returns: "List of rate limit information for orders"
            data_source: "Memory"
      
      acct_order_history:
        description: "Retrieve order history"
        requests:
          get_order_history:
            description: "Get historical orders for an account"
            endpoint: "allOrders"
            weight: 10
            security_type: "USER_DATA"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - order_id: "Order ID to begin at (optional)"
              - start_time: "Start time in milliseconds (optional)"
              - end_time: "End time in milliseconds (optional)"
              - limit: "Number of results (default 500, max 1000)"
              - recv_window: "Maximum time in milliseconds the request is valid for (optional, max 60000)"
            returns: "List of order details"
            data_source: "Database"
            notes:
              - "If startTime and/or endTime are specified, orderId is ignored"
              - "Orders are filtered by time of the last execution status update"
              - "If orderId is specified, return orders with order ID >= orderId"
              - "If no condition is specified, the most recent orders are returned"
      
      acct_oco_history:
        description: "Retrieve OCO order history"
        requests:
          get_oco_history:
            description: "Get historical OCO orders for an account"
            endpoint: "allOrderLists"
            weight: 10
            security_type: "USER_DATA"
            parameters:
              - from_id: "Order list ID to begin at (optional)"
              - start_time: "Start time in milliseconds (optional)"
              - end_time: "End time in milliseconds (optional)"
              - limit: "Number of results (default 500, max 1000)"
              - recv_window: "Maximum time in milliseconds the request is valid for (optional, max 60000)"
            returns: "List of OCO order details"
            data_source: "Database"
            notes:
              - "If startTime and/or endTime are specified, fromId is ignored"
              - "OCOs are filtered by transactionTime of the last OCO execution status update"
              - "If fromId is specified, return OCOs with order list ID >= fromId"
              - "If no condition is specified, the most recent OCOs are returned"
      
      acct_trade_history:
        description: "Retrieve trade history"
        requests:
          get_trade_history:
            description: "Get trade history for an account"
            endpoint: "myTrades"
            weight: 10
            security_type: "USER_DATA"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - order_id: "Filter by order ID (optional)"
              - start_time: "Start time in milliseconds (optional)"
              - end_time: "End time in milliseconds (optional)"
              - from_id: "Trade ID to fetch from (optional)"
              - limit: "Number of results (default 500, max 1000)"
              - recv_window: "Maximum time in milliseconds the request is valid for (optional, max 60000)"
            returns: "List of trade details"
            data_source: "Memory => Database"
            notes:
              - "If fromId is specified, return trades with trade ID >= fromId"
              - "If startTime and/or endTime are specified, trades are filtered by execution time"
              - "fromId cannot be used together with startTime and endTime"
              - "If orderId is specified, only trades related to that order are returned"
              - "startTime and endTime cannot be used together with orderId"
              - "If no condition is specified, the most recent trades are returned"
      
      acct_prevented_matches:
        description: "Retrieve self-trade prevention matches"
        requests:
          get_prevented_matches:
            description: "Get prevented matches due to self-trade prevention"
            endpoint: "myPreventedMatches"
            weight:
              - "1 if symbol is invalid"
              - "1 if querying by preventedMatchId"
              - "10 if querying by orderId"
            security_type: "USER_DATA"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - prevented_match_id: "Filter by specific prevented match ID (optional)"
              - order_id: "Filter by order ID (optional)"
              - from_prevented_match_id: "Prevented match ID to fetch from (optional)"
              - limit: "Number of results (default 500, max 1000)"
              - recv_window: "Maximum time in milliseconds the request is valid for (optional, max 60000)"
            returns: "List of prevented match details"
            data_source: "Database"
            supported_combinations:
              - "symbol + preventedMatchId"
              - "symbol + orderId"
              - "symbol + orderId + fromPreventedMatchId (limit defaults to 500)"
              - "symbol + orderId + fromPreventedMatchId + limit"
  
  response_models:
    account_info:
      description: "Account information response model"
      fields:
        - makerCommission: "Maker commission rate"
        - takerCommission: "Taker commission rate"
        - buyerCommission: "Buyer commission rate"
        - sellerCommission: "Seller commission rate"
        - canTrade: "Whether account can trade"
        - canWithdraw: "Whether account can withdraw"
        - canDeposit: "Whether account can deposit"
        - commissionRates: "Detailed commission rates"
        - brokered: "Whether account is brokered"
        - requireSelfTradePrevention: "Whether self-trade prevention is required"
        - updateTime: "Last update time in milliseconds"
        - accountType: "Account type (e.g., 'SPOT')"
        - balances: "List of asset balances"
        - permissions: "List of account permissions"
    
    order_rate_limit:
      description: "Order rate limit information"
      fields:
        - rateLimitType: "Type of rate limit (e.g., 'ORDERS')"
        - interval: "Time interval (e.g., 'SECOND', 'DAY')"
        - intervalNum: "Number of intervals"
        - limit: "Maximum limit"
        - count: "Current count"
    
    order_history:
      description: "Order history information"
      fields:
        - symbol: "Trading symbol"
        - orderId: "Order ID"
        - orderListId: "Order list ID"
        - clientOrderId: "Client order ID"
        - price: "Order price"
        - origQty: "Original quantity"
        - executedQty: "Executed quantity"
        - cummulativeQuoteQty: "Cumulative quote quantity"
        - status: "Order status"
        - timeInForce: "Time in force"
        - type: "Order type"
        - side: "Order side"
        - stopPrice: "Stop price"
        - icebergQty: "Iceberg quantity"
        - time: "Order time"
        - updateTime: "Update time"
        - isWorking: "Whether order is working"
        - workingTime: "Working time"
        - origQuoteOrderQty: "Original quote order quantity"
        - selfTradePreventionMode: "Self-trade prevention mode"
        - preventedMatchId: "Prevented match ID (only if order expired due to STP)"
        - preventedQuantity: "Prevented quantity (only if order expired due to STP)"
    
    oco_order:
      description: "OCO order information"
      fields:
        - orderListId: "Order list ID"
        - contingencyType: "Contingency type"
        - listStatusType: "List status type"
        - listOrderStatus: "List order status"
        - listClientOrderId: "List client order ID"
        - transactionTime: "Transaction time"
        - symbol: "Trading symbol"
        - orders: "List of orders in the OCO"
    
    trade_history:
      description: "Trade history information"
      fields:
        - symbol: "Trading symbol"
        - id: "Trade ID"
        - orderId: "Order ID"
        - orderListId: "Order list ID"
        - price: "Trade price"
        - qty: "Trade quantity"
        - quoteQty: "Quote quantity"
        - commission: "Commission amount"
        - commissionAsset: "Commission asset"
        - time: "Trade time"
        - isBuyer: "Whether the user is the buyer"
        - isMaker: "Whether the user is the maker"
        - isBestMatch: "Whether it's the best match"
    
    prevented_match:
      description: "Prevented match information"
      fields:
        - symbol: "Trading symbol"
        - preventedMatchId: "Prevented match ID"
        - takerOrderId: "Taker order ID"
        - makerOrderId: "Maker order ID"
        - tradeGroupId: "Trade group ID"
        - selfTradePreventionMode: "Self-trade prevention mode"
        - price: "Order price"
        - makerPreventedQuantity: "Maker prevented quantity"
        - transactTime: "Transaction time"