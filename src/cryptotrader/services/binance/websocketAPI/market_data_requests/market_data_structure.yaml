market_data_requests:
  description: "WebSocket API requests for market data from the Binance API"

  dependencies:
    - cryptotrader.config.get_logger
    - cryptotrader.services.binance.websocketAPI.base_operations.BinanceWebSocketConnection
    - cryptotrader.services.binance.websocketAPI.base_operations.SecurityType
    - cryptotrader.services.binance.models

  requests:
    order_book:
      description: "Retrieve order book data for a trading symbol"
      file: "order_book.py"
      endpoint: "depth"
      weight: "1-50 based on limit parameter"
      security_type: "NONE"
      functions:
        get_order_book_ws:
          description: "Send a request to retrieve order book data"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT')"
            - limit: "Number of price levels to return (default 100, max 5000)"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
          weight_details:
            - "1-100: 1"
            - "101-500: 5"
            - "501-1000: 10"
            - "1001-5000: 50"
        process_order_book_response:
          description: "Process the order book response"
          parameters:
            - response: "WebSocket response data"
          returns: "OrderBook object"

    recent_trades:
      description: "Retrieve recent trades for a trading symbol"
      file: "recent_trades.py"
      endpoint: "trades.recent"
      weight: 1
      security_type: "NONE"
      functions:
        get_recent_trades_ws:
          description: "Send a request to retrieve recent trades"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT')"
            - limit: "Number of trades to return (default 500, max 1000)"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_recent_trades_response:
          description: "Process the recent trades response"
          parameters:
            - response: "WebSocket response data"
          returns: "List of Trade objects"
      data_source: "Memory"

    historical_trades:
      description: "Retrieve historical trades for a trading symbol"
      file: "historical_trades.py"
      endpoint: "trades.historical"
      weight: 5
      security_type: "MARKET_DATA"
      functions:
        get_historical_trades_ws:
          description: "Send a request to retrieve historical trades"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT')"
            - from_id: "Trade ID to fetch from (optional)"
            - limit: "Number of trades to return (default 500, max 1000)"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_historical_trades_response:
          description: "Process the historical trades response"
          parameters:
            - response: "WebSocket response data"
          returns: "List of Trade objects"
      data_source: "Database"
      notes:
        - "If fromId is not specified, the most recent trades are returned"

    klines:
      description: "Retrieve kline/candlestick data for a trading symbol"
      file: "klines.py"
      endpoint: "klines"
      weight: 1
      security_type: "NONE"
      functions:
        get_klines_ws:
          description: "Send a request to retrieve kline/candlestick data"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT')"
            - interval: "Kline interval (e.g., '1m', '1h', '1d')"
            - start_time: "Start time in milliseconds (optional)"
            - end_time: "End time in milliseconds (optional)"
            - limit: "Number of candles to return (default 500, max 1000)"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_klines_response:
          description: "Process the klines response"
          parameters:
            - response: "WebSocket response data"
          returns: "List of Candle objects"
      data_source: "Database"
      interval_options: "1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M"
      notes:
        - "If startTime and endTime are not specified, the most recent klines are returned"
        - "Interval is case-sensitive"

    aggregate_trades:
      description: "Retrieve aggregate trades for a trading symbol"
      file: "aggregate_trades.py"
      endpoint: "trades.aggregate"
      weight: 1
      security_type: "NONE"
      functions:
        get_aggregate_trades_ws:
          description: "Send a request to retrieve aggregate trades"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT')"
            - from_id: "Aggregate trade ID to fetch from (optional)"
            - start_time: "Start time in milliseconds (optional)"
            - end_time: "End time in milliseconds (optional)"
            - limit: "Number of trades to return (default 500, max 1000)"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_aggregate_trades_response:
          description: "Process the aggregate trades response"
          parameters:
            - response: "WebSocket response data"
          returns: "List of AggTrade objects"
      data_source: "Database"
      notes:
        - "An aggregate trade represents one or more individual trades executed at the same time, from the same taker order, with the same price"
        - "fromId cannot be used together with startTime and endTime"

    symbol_price_ticker:
      description: "Retrieve the latest market price for a symbol or symbols"
      file: "symbol_price_ticker.py"
      endpoint: "ticker.price"
      weight: "1-2 based on parameters"
      security_type: "NONE"
      functions:
        get_price_ticker:
          description: "Send a request to retrieve the latest market price"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT') (optional)"
            - symbols: "List of symbols (optional)"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_price_ticker_response:
          description: "Process the price ticker response"
          parameters:
            - response: "WebSocket response data"
          returns: "Single or list of TickerPrice objects"
      data_source: "Memory"
      weight_details:
        - "symbol: 1"
        - "symbols: 2"
        - "none (all symbols): 2"

    symbol_order_book_ticker:
      description: "Retrieve the current best price and quantity on the order book"
      file: "symbol_order_book_ticker.py"
      endpoint: "ticker.book"
      weight: "1-2 based on parameters"
      security_type: "NONE"
      functions:
        get_book_ticker:
          description: "Send a request to retrieve the order book ticker"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT') (optional)"
            - symbols: "List of symbols (optional)"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_book_ticker_response:
          description: "Process the order book ticker response"
          parameters:
            - response: "WebSocket response data"
          returns: "Single or list of BookTicker objects"
      data_source: "Memory"
      weight_details:
        - "symbol: 1"
        - "symbols: 2"
        - "none (all symbols): 2"

    ticker_price_24h:
      description: "Retrieve 24-hour price change statistics"
      file: "ticker_price_24h.py"
      endpoint: "ticker.24hr"
      weight: "1-40 based on parameters"
      security_type: "NONE"
      functions:
        get_24h_ticker:
          description: "Send a request to retrieve 24-hour price change statistics"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT') (optional)"
            - symbols: "List of symbols (optional)"
            - ticker_type: "Ticker type: 'FULL' (default) or 'MINI'"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_24h_ticker_response:
          description: "Process the 24-hour ticker response"
          parameters:
            - response: "WebSocket response data"
            - ticker_type: "Ticker type: 'FULL' (default) or 'MINI'"
          returns: "Single or list of PriceStats/PriceStatsMini objects"
      data_source: "Memory"
      weight_details:
        - "1-20 symbols: 1"
        - "21-100 symbols: 20"
        - "101 or more symbols: 40"
        - "all symbols: 40"

    rolling_window_price:
      description: "Retrieve rolling window price change statistics"
      file: "rolling_window_price.py"
      endpoint: "ticker"
      weight: "2-100 based on parameters"
      security_type: "NONE"
      functions:
        get_rolling_window_stats:
          description: "Send a request to retrieve rolling window price statistics"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT') (optional)"
            - symbols: "List of symbols (optional)"
            - window_size: "Window size (default '1d')"
            - ticker_type: "Ticker type: 'FULL' (default) or 'MINI'"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_rolling_window_response:
          description: "Process the rolling window response"
          parameters:
            - response: "WebSocket response data"
            - ticker_type: "Ticker type: 'FULL' (default) or 'MINI'"
          returns: "Single or list of RollingWindowStats/RollingWindowStatsMini objects"
      data_source: "Database"
      weight_details:
        - "1-50 symbols: 2 per symbol"
        - "51-100 symbols: 100"
      window_size_options: "1m-59m (minutes), 1h-23h (hours), 1d-7d (days)"

    current_average_price:
      description: "Retrieve the current average price for a trading symbol"
      file: "current_average_price.py"
      endpoint: "avgPrice"
      weight: 1
      security_type: "NONE"
      functions:
        get_avg_price:
          description: "Send a request to retrieve the current average price"
          parameters:
            - connection: "Active WebSocket connection"
            - symbol: "Trading symbol (e.g., 'BTCUSDT')"
            - callback: "Callback function for the response (optional)"
          returns: "Message ID of the request"
        process_avg_price_response:
          description: "Process the average price response"
          parameters:
            - response: "WebSocket response data"
          returns: "AvgPrice object"
      data_source: "Memory"

  models:
    trade:
      description: "Model for representing a single trade"
      fields:
        - id: "Trade ID"
        - price: "Trade price"
        - quantity: "Trade quantity"
        - quoteQuantity: "Quote asset quantity"
        - time: "Trade time in milliseconds"
        - isBuyerMaker: "Whether the buyer is the maker"
        - isBestMatch: "Whether this trade is the best match"

    agg_trade:
      description: "Model for representing an aggregate trade"
      fields:
        - aggregateTradeId: "Aggregate trade ID"
        - price: "Trade price"
        - quantity: "Trade quantity"
        - firstTradeId: "First trade ID in the aggregate"
        - lastTradeId: "Last trade ID in the aggregate"
        - timestamp: "Trade time in milliseconds"
        - isBuyerMaker: "Whether the buyer is the maker"
        - isBestMatch: "Whether this trade is the best match"

    candle:
      description: "Model for representing a candlestick"
      fields:
        - timestamp: "Open time in milliseconds"
        - openPrice: "Open price"
        - highPrice: "High price"
        - lowPrice: "Low price"
        - closePrice: "Close price"
        - volume: "Volume"
        - quoteVolume: "Quote asset volume"

    order_book:
      description: "Model for representing the order book"
      fields:
        - lastUpdateId: "Last update ID"
        - bids: "List of order book entries for bids"
        - asks: "List of order book entries for asks"

    order_book_entry:
      description: "Model for representing a single order book entry"
      fields:
        - price: "Price level"
        - quantity: "Quantity at the price level"

    ticker_price:
      description: "Model for representing a symbol price ticker"
      fields:
        - symbol: "Trading symbol"
        - price: "Current price"

    book_ticker:
      description: "Model for representing a symbol order book ticker"
      fields:
        - symbol: "Trading symbol"
        - bidPrice: "Best bid price"
        - bidQty: "Best bid quantity"
        - askPrice: "Best ask price"
        - askQty: "Best ask quantity"

    price_stats_mini:
      description: "Model for representing 24hr price change statistics (MINI version)"
      fields:
        - symbol: "Trading symbol"
        - priceChange: "Price change"
        - lastPrice: "Latest price"
        - openPrice: "Open price"
        - highPrice: "High price"
        - lowPrice: "Low price"
        - volume: "Volume"
        - quoteVolume: "Quote asset volume"
        - openTime: "Open time in milliseconds"
        - closeTime: "Close time in milliseconds"
        - firstId: "First trade ID"
        - lastId: "Last trade ID"
        - count: "Trade count"

    price_stats:
      description: "Model for representing 24hr price change statistics (FULL version)"
      extends: "price_stats_mini"
      additional_fields:
        - priceChangePercent: "Price change percent"
        - weightedAvgPrice: "Weighted average price"
        - prevClosePrice: "Previous close price"
        - lastQty: "Last trade quantity"
        - bidPrice: "Best bid price"
        - bidQty: "Best bid quantity"
        - askPrice: "Best ask price"
        - askQty: "Best ask quantity"

    rolling_window_stats_mini:
      description: "Model for representing rolling window price change statistics (MINI version)"
      fields:
        - symbol: "Trading symbol"
        - priceChange: "Price change"
        - lastPrice: "Latest price"
        - openPrice: "Open price"
        - highPrice: "High price"
        - lowPrice: "Low price"
        - volume: "Volume"
        - quoteVolume: "Quote asset volume"
        - openTime: "Open time in milliseconds"
        - closeTime: "Close time in milliseconds"
        - firstId: "First trade ID"
        - lastId: "Last trade ID"
        - count: "Trade count"

    rolling_window_stats:
      description: "Model for representing rolling window price change statistics (FULL version)"
      extends: "rolling_window_stats_mini"
      additional_fields:
        - priceChangePercent: "Price change percent"
        - weightedAvgPrice: "Weighted average price"

    avg_price:
      description: "Model for representing average price"
      fields:
        - mins: "Number of minutes for the average"
        - price: "Average price"

  diagnostic_scripts:
    order_book_diagnostic:
      description: "Tests the Order Book WebSocket API functionality"
      file: "market_diagnostics/order_book_diagnostic.py"
      tests:
        - "Fetches order book for a symbol with specified limit"
        - "Validates bid and ask data"
        - "Calculates bid-ask spread and volume metrics"

    recent_trades_diagnostic:
      description: "Tests the Recent Trades WebSocket API functionality"
      file: "market_diagnostics/recent_trades_diagnostic.py"
      tests:
        - "Fetches recent trades for a symbol"
        - "Validates trade data structures"

    historical_trades_diagnostic:
      description: "Tests the Historical Trades WebSocket API functionality"
      file: "market_diagnostics/historical_trades_diagnostic.py"
      tests:
        - "Fetches historical trades for a symbol"
        - "Validates trade data structures"

    klines_diagnostic:
      description: "Tests the Klines WebSocket API functionality"
      file: "market_diagnostics/klines_diagnostic.py"
      tests:
        - "Fetches candlestick data for a symbol and interval"
        - "Validates candlestick data"
        - "Analyzes price range in the sample"

    aggregate_trades_diagnostic:
      description: "Tests the Aggregate Trades WebSocket API functionality"
      file: "market_diagnostics/aggregate_trades_diagnostic.py"
      tests:
        - "Fetches aggregate trades for a symbol"
        - "Validates aggregate trade data structures"

    symbol_price_ticker_diagnostic:
      description: "Tests the Symbol Price Ticker WebSocket API functionality"
      file: "market_diagnostics/symbol_price_ticker_diagnostic.py"
      tests:
        - "Fetches price ticker for a single symbol"
        - "Fetches price tickers for multiple symbols"

    symbol_order_book_ticker_diagnostic:
      description: "Tests the Symbol Order Book Ticker WebSocket API functionality"
      file: "market_diagnostics/symbol_order_book_ticker_diagnostic.py"
      tests:
        - "Fetches order book ticker for a single symbol"
        - "Fetches order book tickers for multiple symbols"
        - "Analyzes spread percentages across symbols"

    ticker_price_24h_diagnostic:
      description: "Tests the 24hr Ticker Price WebSocket API functionality"
      file: "market_diagnostics/ticker_price_24h_diagnostic.py"
      tests:
        - "Fetches 24hr ticker (FULL) for a single symbol"
        - "Fetches 24hr ticker (MINI) for a single symbol"
        - "Fetches 24hr tickers for multiple symbols"

    rolling_window_price_diagnostic:
      description: "Tests the Rolling Window Price WebSocket API functionality"
      file: "market_diagnostics/rolling_window_price_diagnostic.py"
      tests:
        - "Fetches rolling window stats for different window sizes"
        - "Fetches rolling window stats for multiple symbols"

    current_average_price_diagnostic:
      description: "Tests the Current Average Price WebSocket API functionality"
      file: "market_diagnostics/current_average_price_diagnostic.py"
      tests:
        - "Fetches current average price for a symbol"
