binance_websocket_api:
  description: "API functions available in the CryptoTrader Binance WebSocket API implementation"
  
  dependencies:
    - cryptotrader.config.Secrets
    - cryptotrader.config.get_logger
    - cryptotrader.services.binance.restAPI.base_operations.RateLimiter
    - cryptotrader.services.binance.models.base_models.RateLimit
    - cryptotrader.services.binance.models.base_models.RateLimitType
    - cryptotrader.services.binance.models.base_models.RateLimitInterval
  
  core_components:
    base_operations:
      description: "Core WebSocket connection management and authentication"
      classes:
        SecurityType:
          description: "Security types for Binance API endpoints"
          type: "Enum"
          values:
            - NONE: "Public market data"
            - TRADE: "Trading on the exchange (requires API key and signature)"
            - USER_DATA: "Private account information (requires API key and signature)"
            - USER_STREAM: "Managing user data stream (requires API key only)"
            - MARKET_DATA: "Historical market data (requires API key only)"
        
        BinanceWebSocketConnection:
          description: "Manages a WebSocket connection to the Binance API"
          dependencies:
            - websockets
            - asyncio
            - hmac, hashlib
            - urllib.parse
          properties:
            - on_message: "Callback function for received messages"
            - on_error: "Callback function for errors"
            - on_reconnect: "Callback function when reconnection happens"
            - on_close: "Callback function when connection closes"
            - ping_interval: "How often to send ping frames (seconds), default 180s (3 minutes)"
            - pong_timeout: "How long to wait for pong response (seconds), default 10s"
            - reconnect_attempts: "Maximum number of reconnection attempts"
            - base_url: "Base URL for WebSocket API, default is wss://ws-api.binance.us:443"
            - return_rate_limits: "Whether to return rate limits in responses, default True"
            - websocket: "Active WebSocket connection"
            - is_connected: "Connection state flag"
            - is_closing: "Closing state flag"
            - reconnect_count: "Current reconnection attempt count"
            - rate_limiter: "Rate limit tracking instance"
            - ip_banned_until: "Timestamp when IP ban expires (if banned)"
            - retry_after: "Timestamp when to retry after rate limit (if limited)"
            - connection_start_time: "Timestamp when connection was established"
            - message_id: "Counter for request message IDs"
          methods:
            - connect: 
                description: "Establish WebSocket connection to Binance WebSocket API"
                weight: 1
                security_type: "NONE"
                parameters: []
                returns: "Boolean indicating success"
            - close: 
                description: "Close the WebSocket connection"
                parameters: []
                returns: "None"
            - send: 
                description: "Send a message to the Binance WebSocket API server"
                parameters:
                  - method: "API method to call (e.g., 'ping', 'time', 'exchangeInfo')"
                  - params: "Parameters for the method"
                  - security_type: "Type of security required for this request"
                  - return_rate_limits: "Override default setting for returning rate limits"
                returns: "Message ID that can be used to match the response"
            - send_signed: 
                description: "Send a signed message to the Binance WebSocket API server"
                parameters:
                  - method: "API method to call (e.g., 'order.place', 'account.status')"
                  - params: "Parameters for the method"
                  - return_rate_limits: "Override default setting for returning rate limits"
                returns: "Message ID that can be used to match the response"
          internal_methods:
            - _ping_loop: "Send periodic pings to keep connection alive"
            - _receive_loop: "Receive and process incoming WebSocket messages"
            - _reconnect: "Handle reconnection after connection loss"
            - _update_rate_limits: "Update rate limit counters from WebSocket response"
            - _handle_error: "Handle error responses from WebSocket API"
            - _monitor_connection_age: "Monitor connection age for 24h limit"
          error_handling:
            - "400": "Bad request - client-side error"
            - "403": "Blocked by Web Application Firewall"
            - "409": "Request partially failed but also partially succeeded"
            - "418": "Auto-banned for repeated rate limit violations"
            - "429": "Rate limit exceeded, needs to back off"
            - "5XX": "Internal server errors"
        
        BinanceWebSocketClient:
          description: "Base class for Binance WebSocket API clients"
          dependencies:
            - BinanceWebSocketConnection
          properties:
            - connections: "Dictionary of active connections"
            - callbacks: "Dictionary of message callbacks"
            - response_handlers: "Dictionary of response handlers"
          methods:
            - close_all_connections: "Close all active WebSocket connections"
          internal_methods:
            - _create_connection: "Create a new WebSocket connection"
            - _handle_message: "Handle received WebSocket message"
            - _handle_error: "Handle WebSocket error"
            - _handle_reconnect: "Handle WebSocket reconnection"
            - _handle_close: "Handle WebSocket closure"
  
  market_stream:
  description: "WebSocket streams for market data from the Binance API"
  classes:
    MarketStreamClient:
      description: "Client for accessing Binance Market WebSocket streams"
      dependencies:
        - BinanceWebSocketClient
        - BinanceWebSocketConnection
        - OrderBook
        - Trade
        - AggTrade
        - Candle
        - TickerPrice
        - PriceStats
        - RollingWindowStats
      properties:
        - callbacks: "Dictionary of stream callbacks by stream name"
        - subscriptions: "Dictionary of active stream subscriptions"
      methods:
        - get_order_book:
            description: "Get current order book for a symbol"
            endpoint: "depth"
            weight: "1-50 based on limit"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - limit: "Number of price levels (default 100, max 5000)"
            returns: "OrderBook object with bids and asks"
        - get_recent_trades:
            description: "Get recent trades for a symbol"
            endpoint: "trades.recent"
            weight: 1
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - limit: "Number of trades (default 500, max 1000)"
            returns: "List of Trade objects"
        - get_historical_trades:
            description: "Get historical trades for a symbol"
            endpoint: "trades.historical"
            weight: 5
            security_type: "MARKET_DATA"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - fromId: "Trade ID to fetch from (optional)"
              - limit: "Number of trades (default 500, max 1000)"
            returns: "List of Trade objects"
        - get_aggregate_trades:
            description: "Get aggregate trades for a symbol"
            endpoint: "trades.aggregate"
            weight: 1
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - fromId: "Aggregate trade ID to fetch from (optional)"
              - startTime: "Start time in milliseconds (optional)"
              - endTime: "End time in milliseconds (optional)"
              - limit: "Number of trades (default 500, max 1000)"
            returns: "List of AggTrade objects"
        - get_klines:
            description: "Get klines/candlestick data for a symbol"
            endpoint: "klines"
            weight: 1
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - interval: "Kline interval (e.g., '1m', '1h', '1d')"
              - startTime: "Start time in milliseconds (optional)"
              - endTime: "End time in milliseconds (optional)"
              - limit: "Number of candles (default 500, max 1000)"
            returns: "List of Candle objects"
        - get_avg_price:
            description: "Get current average price for a symbol"
            endpoint: "avgPrice"
            weight: 1
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
            returns: "AvgPrice object"
        - get_24hr_ticker:
            description: "Get 24-hour price change statistics"
            endpoint: "ticker.24hr"
            weight: "1-40 based on number of symbols"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT') (optional)"
              - symbols: "List of symbols (optional)"
              - type: "Ticker type: FULL or MINI (default FULL)"
            returns: "PriceStats object or list of PriceStats objects"
        - get_ticker:
            description: "Get rolling window price change statistics"
            endpoint: "ticker"
            weight: "2 per symbol or 100 for 51-100 symbols"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - symbols: "List of symbols (optional)"
              - windowSize: "Window size (e.g., '1d', '7d') (default '1d')"
              - type: "Ticker type: FULL or MINI (default FULL)"
            returns: "RollingWindowStats object or list of RollingWindowStats objects"
        - get_price_ticker:
            description: "Get latest price for a symbol or symbols"
            endpoint: "ticker.price"
            weight: "1-2 based on parameters"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT') (optional)"
              - symbols: "List of symbols (optional)"
            returns: "TickerPrice object or list of TickerPrice objects"
        - get_book_ticker:
            description: "Get best bid/ask price and quantity"
            endpoint: "ticker.book"
            weight: "1-2 based on parameters"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT') (optional)"
              - symbols: "List of symbols (optional)"
            returns: "OrderBookTicker object or list of OrderBookTicker objects"
      stream_methods:
        - subscribe_trade_stream:
            description: "Subscribe to real-time trade updates for a symbol"
            stream_name: "<symbol>@trade"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_agg_trade_stream:
            description: "Subscribe to aggregate trade updates for a symbol"
            stream_name: "<symbol>@aggTrade"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_kline_stream:
            description: "Subscribe to kline/candlestick updates for a symbol"
            stream_name: "<symbol>@kline_<interval>"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - interval: "Kline interval (e.g., '1m', '1h', '1d')"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_mini_ticker_stream:
            description: "Subscribe to 24hr mini ticker updates"
            stream_name: "<symbol>@miniTicker or !miniTicker@arr"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT') or None for all symbols"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_ticker_stream:
            description: "Subscribe to 24hr ticker updates"
            stream_name: "<symbol>@ticker or !ticker@arr"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT') or None for all symbols"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_rolling_window_ticker_stream:
            description: "Subscribe to rolling window ticker updates"
            stream_name: "<symbol>@ticker_<window_size> or !ticker_<window-size>@arr"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT') or None for all symbols"
              - window_size: "Window size (e.g., '1d', '7d')"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_book_ticker_stream:
            description: "Subscribe to order book ticker updates"
            stream_name: "<symbol>@bookTicker"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_partial_book_depth_stream:
            description: "Subscribe to partial book depth updates"
            stream_name: "<symbol>@depth<levels>"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - levels: "Number of price levels (5, 10, or 20)"
              - update_speed: "Update speed in ms (1000 or 100)"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
        - subscribe_diff_depth_stream:
            description: "Subscribe to differential order book updates"
            stream_name: "<symbol>@depth"
            parameters:
              - symbol: "Trading symbol (e.g., 'BTCUSDT')"
              - update_speed: "Update speed in ms (1000 or 100)"
              - callback: "Function to call on updates"
            returns: "Subscription ID"
  models:
    OrderBookTicker:
      description: "Data structure for best bid/ask price and quantity"
      properties:
        - symbol: "Trading pair symbol"
        - bidPrice: "Best bid price"
        - bidQty: "Best bid quantity"
        - askPrice: "Best ask price"
        - askQty: "Best ask quantity"
    
  # Placeholder sections for future implementation
  # Will be populated based on actual documentation and code

  user_stream:
    description: "TO BE IMPLEMENTED: WebSocket streams for user data"
    # Will be populated based on Binance documentation and actual implementation
    
  order_stream:
    description: "TO BE IMPLEMENTED: WebSocket API for trading operations"
    # Will be populated based on Binance documentation and actual implementation
    
  combined_streams:
    description: "TO BE IMPLEMENTED: Multiple WebSocket streams over a single connection"
    # Will be populated based on Binance documentation and actual implementation